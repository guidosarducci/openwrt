From 7bace768f07e03675bb10adf485eba50437d6784 Mon Sep 17 00:00:00 2001
From: Tony Ambardar <tony.ambardar@gmail.com>
Date: Sun, 10 Nov 2019 21:37:44 -0800
Subject: [PATCH] MIPS: eBPF: Fix 64-bit insn output by 32-bit JIT

The MIPS eBPF JIT does not support instructions with 64-bit operands on
32-bit platforms. However, the code checking for 64-bit arguments is
incorrect and can still emit 64-bit insns which then cause an exception on
32-bit platforms. The problem is easily shown by loading the test_bpf
module on a mips32 platform.

Fix the code and explicitly test for 64-bit loads/stores.

Signed-off-by: Tony Ambardar <tony.ambardar@gmail.com>
Fixes: 716850ab104d ("MIPS: eBPF: Initial eBPF support for MIPS32 architecture")
Link: https://bugzilla.kernel.org/show_bug.cgi?id=205459
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Martin KaFai Lau <kafai@fb.com>
Cc: Song Liu <songliubraving@fb.com>
Cc: Yonghong Song <yhs@fb.com>
Cc: Ralf Baechle <ralf@linux-mips.org>
Cc: Paul Burton <paulburton@kernel.org>
Cc: James Hogan <jhogan@kernel.org>
Cc: Hassan Naveed <hnaveed@wavecomp.com>
Cc: netdev@vger.kernel.org
Cc: bpf@vger.kernel.org
Cc: linux-mips@vger.kernel.org
---
 arch/mips/net/ebpf_jit.c | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/arch/mips/net/ebpf_jit.c b/arch/mips/net/ebpf_jit.c
index 3548a69c82f7..19161166770b 100644
--- a/arch/mips/net/ebpf_jit.c
+++ b/arch/mips/net/ebpf_jit.c
@@ -667,9 +667,18 @@ static int build_one_insn(const struct bpf_insn *insn, struct jit_ctx *ctx,
 	s64 t64s;
 	int bpf_op = BPF_OP(insn->code);
 
-	if (IS_ENABLED(CONFIG_32BIT) && ((BPF_CLASS(insn->code) == BPF_ALU64)
-						|| (bpf_op == BPF_DW)))
-		return -EINVAL;
+	/* No support in 32-bit JIT for 64-bit ALU and args */
+	if (IS_ENABLED(CONFIG_32BIT)) {
+		if (BPF_CLASS(insn->code) == BPF_ALU64)
+			return -EINVAL;
+		switch (BPF_CLASS(insn->code) | BPF_SIZE(insn->code)) {
+		case BPF_LD | BPF_DW:
+		case BPF_LDX | BPF_DW:
+		case BPF_ST | BPF_DW:
+		case BPF_STX | BPF_DW:
+			return -EINVAL;
+		}
+	}
 
 	switch (insn->code) {
 	case BPF_ALU64 | BPF_ADD | BPF_K: /* ALU64_IMM */
-- 
2.17.1

